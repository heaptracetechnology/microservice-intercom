omg: 1
lifecycle:
  startup:
    command: ['microservice-intercom']
info:
  version: 1.0.0
  title: Intercom
  description: This is an intercom service
  contact:
    name: Rohit Shetty
    url: https://github.com/ht68rohit
    email: rohits@heaptrace.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
actions:
  createUser:
    help: Create new user
    http:
      port: 3000
      method: post
      path: /createuser
      contentType: application/json
    arguments:
      userId:
        type: string
        in: requestBody
        required: true
        help:
          A unique string identifier for the user. It is required on creation if
          an email is not supplied
      email:
        type: string
        in: requestBody
        required: true
        help:
          The user's email address. It is required on creation if a user_id is
          not supplied.
      phone:
        type: string
        in: requestBody
        required: false
        help: The user's phone number.
      name:
        type: string
        in: requestBody
        required: false
        help: The user's full name
      customAttributes:
        type: map
        in: requestBody
        required: false
        help:
          A hash of key/value pairs containing any other data about the user you
          want Intercom to store
    output:
      type: object
      contentType: application/json
      properties:
        id:
          help: The ID generated from this operation
          type: string
        email:
          help: The user email address
          type: string
        phone:
          help: The user phone number
          type: string
        name:
          help: The user name
          type: string
        custom_attributes:
          help: The custom attributes provided at the time of creating user
          type: map
  emailMessage:
    help: Send message by email
    http:
      port: 3000
      method: post
      path: /emailmessage
      contentType: application/json
    arguments:
      # template:
      #   type: enum
      #   enum:
      #   - NO_TEMPLATE
      #   - PERSONAL_TEMPLATE
      #   - PLAIN_TEMPLATE
      #   in: requestBody
      #   required: true
      #   help: Set templete for message
      userId:
        type: string
        in: requestBody
        required: true
        help: The user id that is created
      to:
        type: string
        in: requestBody
        required: true
        help: The email address of user to send the message
      subject:
        type: string
        in: requestBody
        required: true
        help: The subject of message
      body:
        type: string
        in: requestBody
        required: true
        help: The body of message
    output:
      type: object
      contentType: application/json
      properties:
        message_type:
          help: The type of message (email)
          type: string
        id:
          help: The ID of operation
          type: string
        owner:
          help: The object of owner details
          type: map
        body:
          help: The message body
          type: string
  inappMessage:
    help: Send message by inapp
    http:
      port: 3000
      method: post
      path: /inappmessage
      contentType: application/json
    arguments:
      from:
        type: int
        in: requestBody
        required: true
        help: The form argument will be Admin ID
      to:
        type: string
        in: requestBody
        required: true
        help: The email address of receiver
      body:
        type: string
        in: requestBody
        required: true
        help: The body of message
    output:
      type: object
      contentType: application/json
      properties:
        message_type:
          help: The type of message (inapp)
          type: string
        id:
          help: The ID of operation
          type: string
        owner:
          help: The object of owner details
          type: map
        body:
          help: The message body
          type: string
  userMessage:
    help: Send message by user
    http:
      port: 3000
      method: post
      path: /usermessage
      contentType: application/json
    arguments:
      email:
        type: string
        in: requestBody
        required: true
        help: The object of sender with Email
      body:
        type: string
        in: requestBody
        required: true
        help: The body of message
    output:
      type: object
      contentType: application/json
      properties:
        id:
          help: The ID of operation
          type: string
        owner:
          help: The object of owner details
          type: map
        body:
          help: The message body
          type: string
environment:
  ACCESS_TOKEN:
    type: string
    required: true
    help: Access token for intercom
